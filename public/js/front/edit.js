/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmory imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmory exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		Object.defineProperty(exports, name, {
/******/ 			configurable: false,
/******/ 			enumerable: true,
/******/ 			get: getter
/******/ 		});
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {// Generated by CoffeeScript 1.12.1\n(function() {\n  var Parser,\n    slice = [].slice;\n\n  Parser = (function() {\n    var array_keys, array_values, htmlspecialchars, preg_quote, str_replace, trim, ucfirst;\n\n    ucfirst = function(str) {\n      return (str.charAt(0)).toUpperCase() + str.substring(1);\n    };\n\n    preg_quote = function(str) {\n      return str.replace(/[-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n    };\n\n    str_replace = function(search, replace, str) {\n      var i, j, l, len, len1, val;\n      if (search instanceof Array) {\n        if (replace instanceof Array) {\n          for (i = j = 0, len = search.length; j < len; i = ++j) {\n            val = search[i];\n            str = str_replace(val, replace[i], str);\n          }\n        } else {\n          for (l = 0, len1 = search.length; l < len1; l++) {\n            val = search[l];\n            str = str_replace(val, replace, str);\n          }\n        }\n      } else {\n        search = preg_quote(search);\n        str = str.replace(new RegExp(search, 'g'), replace);\n      }\n      return str;\n    };\n\n    htmlspecialchars = function(str) {\n      return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\n    };\n\n    trim = function(str, ch) {\n      var c, i, j, ref, search;\n      if (ch == null) {\n        ch = null;\n      }\n      if (ch != null) {\n        search = '';\n        for (i = j = 0, ref = ch.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {\n          c = ch[i];\n          c = preg_quote(c);\n          search += c;\n        }\n        search = '[' + search + ']*';\n        return str.replace(new RegExp('^' + search), '').replace(new RegExp(search + '$'), '');\n      } else {\n        return str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n      }\n    };\n\n    array_keys = function(arr) {\n      var _, j, k, len, result;\n      result = [];\n      if (arr instanceof Array) {\n        for (k = j = 0, len = arr.length; j < len; k = ++j) {\n          _ = arr[k];\n          result.push(k);\n        }\n      } else {\n        for (k in arr) {\n          result.push(k);\n        }\n      }\n      return result;\n    };\n\n    array_values = function(arr) {\n      var _, j, len, result, v;\n      result = [];\n      if (arr instanceof Array) {\n        for (j = 0, len = arr.length; j < len; j++) {\n          v = arr[j];\n          result.push(v);\n        }\n      } else {\n        for (_ in arr) {\n          v = arr[_];\n          result.push(v);\n        }\n      }\n      return result;\n    };\n\n    function Parser() {\n      this.commonWhiteList = 'kbd|b|i|strong|em|sup|sub|br|code|del|a|hr|small';\n      this.specialWhiteList = {\n        table: 'table|tbody|thead|tfoot|tr|td|th'\n      };\n      this.hooks = {};\n    }\n\n    Parser.prototype.makeHtml = function(text) {\n      var html;\n      this.footnotes = [];\n      this.definitions = {};\n      this.holders = {};\n      this.uniqid = (Math.ceil(Math.random() * 10000000)) + (Math.ceil(Math.random() * 10000000));\n      this.id = 0;\n      text = this.initText(text);\n      html = this.parse(text);\n      html = this.makeFootnotes(html);\n      return this.call('makeHtml', html);\n    };\n\n    Parser.prototype.hook = function(type, cb) {\n      if (this.hooks[type] == null) {\n        this.hooks[type] = [];\n      }\n      return this.hooks[type].push(cb);\n    };\n\n    Parser.prototype.makeHolder = function(str) {\n      var key;\n      key = \"|\\r\" + this.uniqid + this.id + \"\\r|\";\n      this.id += 1;\n      this.holders[key] = str;\n      return key;\n    };\n\n    Parser.prototype.initText = function(text) {\n      return text.replace(/\\t/g, '    ').replace(/\\r/g, '');\n    };\n\n    Parser.prototype.makeFootnotes = function(html) {\n      var index, val;\n      if (this.footnotes.length > 0) {\n        html += '<div class=\"footnotes\"><hr><ol>';\n        index = 1;\n        while (val = this.footnotes.shift()) {\n          if (typeof val === 'string') {\n            val += \" <a href=\\\"#fnref-\" + index + \"\\\" class=\\\"footnote-backref\\\">&#8617;</a>\";\n          } else {\n            val[val.length - 1] += \" <a href=\\\"#fnref-\" + index + \"\\\" class=\\\"footnote-backref\\\">&#8617;</a>\";\n            val = val.length > 1 ? this.parse(val.join(\"\\n\")) : this.parseInline(val[0]);\n          }\n          html += \"<li id=\\\"fn-\" + index + \"\\\">\" + val + \"</li>\";\n          index += 1;\n        }\n        html += '</ol></div>';\n      }\n      return html;\n    };\n\n    Parser.prototype.parse = function(text) {\n      var block, blocks, end, extract, html, j, len, lines, method, result, start, type, value;\n      lines = [];\n      blocks = this.parseBlock(text, lines);\n      html = '';\n      for (j = 0, len = blocks.length; j < len; j++) {\n        block = blocks[j];\n        type = block[0], start = block[1], end = block[2], value = block[3];\n        extract = lines.slice(start, end + 1);\n        method = 'parse' + ucfirst(type);\n        extract = this.call('before' + ucfirst(method), extract, value);\n        result = this[method](extract, value);\n        result = this.call('after' + ucfirst(method), result, value);\n        html += result;\n      }\n      return html;\n    };\n\n    Parser.prototype.call = function() {\n      var args, callback, j, len, ref, type, value;\n      type = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n      value = args[0];\n      if (this.hooks[type] == null) {\n        return value;\n      }\n      ref = this.hooks[type];\n      for (j = 0, len = ref.length; j < len; j++) {\n        callback = ref[j];\n        value = callback.apply(this, args);\n        args[0] = value;\n      }\n      return value;\n    };\n\n    Parser.prototype.releaseHolder = function(text, clearHolders) {\n      var deep;\n      if (clearHolders == null) {\n        clearHolders = true;\n      }\n      deep = 0;\n      while ((text.indexOf(\"\\r\")) >= 0 && deep < 10) {\n        text = str_replace(array_keys(this.holders), array_values(this.holders), text);\n        deep += 1;\n      }\n      if (clearHolders) {\n        this.holders = {};\n      }\n      return text;\n    };\n\n    Parser.prototype.parseInline = function(text, whiteList, clearHolders, enableAutoLink) {\n      if (whiteList == null) {\n        whiteList = '';\n      }\n      if (clearHolders == null) {\n        clearHolders = true;\n      }\n      if (enableAutoLink == null) {\n        enableAutoLink = true;\n      }\n      text = this.call('beforeParseInline', text);\n      text = text.replace(/(^|[^\\\\])(`+)(.+?)\\2/mg, (function(_this) {\n        return function() {\n          var matches;\n          matches = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return matches[1] + _this.makeHolder('<code>' + (htmlspecialchars(matches[3])) + '</code>');\n        };\n      })(this));\n      text = text.replace(/\\\\(.)/g, (function(_this) {\n        return function() {\n          var escaped, matches;\n          matches = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          escaped = htmlspecialchars(matches[1]);\n          escaped = escaped.replace(/\\$/g, '&dollar;');\n          return _this.makeHolder(escaped);\n        };\n      })(this));\n      text = text.replace(/<(https?:\\/\\/.+)>/ig, (function(_this) {\n        return function() {\n          var link, matches, url;\n          matches = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          url = _this.cleanUrl(matches[1]);\n          link = _this.call('parseLink', matches[1]);\n          return _this.makeHolder(\"<a href=\\\"\" + url + \"\\\">\" + link + \"</a>\");\n        };\n      })(this));\n      text = text.replace(/<(\\/?)([a-z0-9-]+)(\\s+[^>]*)?>/ig, (function(_this) {\n        return function() {\n          var matches;\n          matches = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          if ((('|' + _this.commonWhiteList + '|' + whiteList + '|').indexOf('|' + matches[2].toLowerCase() + '|')) >= 0) {\n            return _this.makeHolder(matches[0]);\n          } else {\n            return htmlspecialchars(matches[0]);\n          }\n        };\n      })(this));\n      text = str_replace(['<', '>'], ['&lt;', '&gt;'], text);\n      text = text.replace(/\\[\\^((?:[^\\]]|\\\\\\]|\\\\\\[)+?)\\]/g, (function(_this) {\n        return function() {\n          var id, matches;\n          matches = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          id = _this.footnotes.indexOf(matches[1]);\n          if (id < 0) {\n            id = _this.footnotes.length + 1;\n            _this.footnotes.push(_this.parseInline(matches[1], '', false));\n          }\n          return _this.makeHolder(\"<sup id=\\\"fnref-\" + id + \"\\\"><a href=\\\"#fn-\" + id + \"\\\" class=\\\"footnote-ref\\\">\" + id + \"</a></sup>\");\n        };\n      })(this));\n      text = text.replace(/!\\[((?:[^\\]]|\\\\\\]|\\\\\\[)*?)\\]\\(((?:[^\\)]|\\\\\\)|\\\\\\()+?)\\)/g, (function(_this) {\n        return function() {\n          var escaped, matches, url;\n          matches = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          escaped = _this.escapeBracket(matches[1]);\n          url = _this.escapeBracket(matches[2]);\n          url = _this.cleanUrl(url);\n          return _this.makeHolder(\"<img src=\\\"\" + url + \"\\\" alt=\\\"\" + escaped + \"\\\" title=\\\"\" + escaped + \"\\\">\");\n        };\n      })(this));\n      text = text.replace(/!\\[((?:[^\\]]|\\\\\\]|\\\\\\[)*?)\\]\\[((?:[^\\]]|\\\\\\]|\\\\\\[)+?)\\]/g, (function(_this) {\n        return function() {\n          var escaped, matches, result;\n          matches = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          escaped = _this.escapeBracket(matches[1]);\n          result = _this.definitions[matches[2]] != null ? \"<img src=\\\"\" + _this.definitions[matches[2]] + \"\\\" alt=\\\"\" + escaped + \"\\\" title=\\\"\" + escaped + \"\\\">\" : escaped;\n          return _this.makeHolder(result);\n        };\n      })(this));\n      text = text.replace(/\\[((?:[^\\]]|\\\\\\]|\\\\\\[)+?)\\]\\(((?:[^\\)]|\\\\\\)|\\\\\\()+?)\\)/g, (function(_this) {\n        return function() {\n          var escaped, matches, url;\n          matches = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          escaped = _this.parseInline(_this.escapeBracket(matches[1]), '', false, false);\n          url = _this.escapeBracket(matches[2]);\n          url = _this.cleanUrl(url);\n          return _this.makeHolder(\"<a href=\\\"\" + url + \"\\\">\" + escaped + \"</a>\");\n        };\n      })(this));\n      text = text.replace(/\\[((?:[^\\]]|\\\\\\]|\\\\\\[)+?)\\]\\[((?:[^\\]]|\\\\\\]|\\\\\\[)+?)\\]/g, (function(_this) {\n        return function() {\n          var escaped, matches, result;\n          matches = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          escaped = _this.parseInline(_this.escapeBracket(matches[1]), '', false, false);\n          result = _this.definitions[matches[2]] != null ? \"<a href=\\\"\" + _this.definitions[matches[2]] + \"\\\">\" + escaped + \"</a>\" : escaped;\n          return _this.makeHolder(result);\n        };\n      })(this));\n      text = this.parseInlineCallback(text);\n      text = text.replace(/<([_a-z0-9-\\.\\+]+@[^@]+\\.[a-z]{2,})>/ig, '<a href=\"mailto:$1\">$1</a>');\n      if (enableAutoLink) {\n        text = text.replace(/(^|[^\"])((https?):[x80-xff_a-z0-9-\\.\\/%#!@\\?\\+=~\\|\\,&\\(\\)]+)($|[^\"])/ig, (function(_this) {\n          return function() {\n            var link, matches;\n            matches = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n            link = _this.call('parseLink', matches[2]);\n            return matches[1] + \"<a href=\\\"\" + matches[2] + \"\\\">\" + link + \"</a>\" + matches[4];\n          };\n        })(this));\n      }\n      text = this.call('afterParseInlineBeforeRelease', text);\n      text = this.releaseHolder(text, clearHolders);\n      text = this.call('afterParseInline', text);\n      return text;\n    };\n\n    Parser.prototype.parseInlineCallback = function(text) {\n      text = text.replace(/(\\*{3})((?:.|\\r)+?)\\1/mg, (function(_this) {\n        return function() {\n          var matches;\n          matches = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return '<strong><em>' + (_this.parseInlineCallback(matches[2])) + '</em></strong>';\n        };\n      })(this));\n      text = text.replace(/(\\*{2})((?:.|\\r)+?)\\1/mg, (function(_this) {\n        return function() {\n          var matches;\n          matches = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return '<strong>' + (_this.parseInlineCallback(matches[2])) + '</strong>';\n        };\n      })(this));\n      text = text.replace(/(\\*)((?:.|\\r)+?)\\1/mg, (function(_this) {\n        return function() {\n          var matches;\n          matches = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return '<em>' + (_this.parseInlineCallback(matches[2])) + '</em>';\n        };\n      })(this));\n      text = text.replace(/(\\s+|^)(_{3})((?:.|\\r)+?)\\2(\\s+|$)/mg, (function(_this) {\n        return function() {\n          var matches;\n          matches = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return matches[1] + '<strong><em>' + (_this.parseInlineCallback(matches[3])) + '</em></strong>' + matches[4];\n        };\n      })(this));\n      text = text.replace(/(\\s+|^)(_{2})((?:.|\\r)+?)\\2(\\s+|$)/mg, (function(_this) {\n        return function() {\n          var matches;\n          matches = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return matches[1] + '<strong>' + (_this.parseInlineCallback(matches[3])) + '</strong>' + matches[4];\n        };\n      })(this));\n      text = text.replace(/(\\s+|^)(_)((?:.|\\r)+?)\\2(\\s+|$)/mg, (function(_this) {\n        return function() {\n          var matches;\n          matches = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return matches[1] + '<em>' + (_this.parseInlineCallback(matches[3])) + '</em>' + matches[4];\n        };\n      })(this));\n      text = text.replace(/(~{2})((?:.|\\r)+?)\\1/mg, (function(_this) {\n        return function() {\n          var matches;\n          matches = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return '<del>' + (_this.parseInlineCallback(matches[2])) + '</del>';\n        };\n      })(this));\n      return text;\n    };\n\n    Parser.prototype.parseBlock = function(text, lines) {\n      var align, aligns, block, emptyCount, head, isAfterList, j, key, l, len, len1, len2, line, m, matches, num, ref, row, rows, space, special, tag;\n      ref = text.split(\"\\n\");\n      for (j = 0, len = ref.length; j < len; j++) {\n        line = ref[j];\n        lines.push(line);\n      }\n      this.blocks = [];\n      this.current = 'normal';\n      this.pos = -1;\n      special = (array_keys(this.specialWhiteList)).join('|');\n      emptyCount = 0;\n      for (key = l = 0, len1 = lines.length; l < len1; key = ++l) {\n        line = lines[key];\n        block = this.getBlock();\n        if (block != null) {\n          block = block.slice(0);\n        }\n        if (!!(matches = line.match(/^(\\s*)(~|`){3,}([^`~]*)$/i))) {\n          if (this.isBlock('code')) {\n            isAfterList = block[3][2];\n            if (isAfterList) {\n              this.combineBlock().setBlock(key);\n            } else {\n              (this.setBlock(key)).endBlock();\n            }\n          } else {\n            isAfterList = false;\n            if (this.isBlock('list')) {\n              space = block[3];\n              isAfterList = (space > 0 && matches[1].length >= space) || matches[1].length > space;\n            }\n            this.startBlock('code', key, [matches[1], matches[3], isAfterList]);\n          }\n          continue;\n        } else if (this.isBlock('code')) {\n          this.setBlock(key);\n          continue;\n        }\n        if (!!(matches = line.match(new RegExp(\"^\\\\s*<(\" + special + \")(\\\\s+[^>]*)?>\", 'i')))) {\n          tag = matches[1].toLowerCase();\n          if (!(this.isBlock('html', tag)) && !(this.isBlock('pre'))) {\n            this.startBlock('html', key, tag);\n          }\n          continue;\n        } else if (!!(matches = line.match(new RegExp(\"</(\" + special + \")>\\\\s*$\", 'i')))) {\n          tag = matches[1].toLowerCase();\n          if (this.isBlock('html', tag)) {\n            this.setBlock(key).endBlock();\n          }\n          continue;\n        } else if (this.isBlock('html')) {\n          this.setBlock(key);\n          continue;\n        }\n        switch (true) {\n          case !!(line.match(/^ {4}/)):\n            emptyCount = 0;\n            if ((this.isBlock('pre')) || this.isBlock('list')) {\n              this.setBlock(key);\n            } else {\n              this.startBlock('pre', key);\n            }\n            break;\n          case !!(matches = line.match(/^(\\s*)((?:[0-9a-z]+\\.)|\\-|\\+|\\*)\\s+/)):\n            space = matches[1].length;\n            emptyCount = 0;\n            if (this.isBlock('list')) {\n              this.setBlock(key, space);\n            } else {\n              this.startBlock('list', key, space);\n            }\n            break;\n          case !!(matches = line.match(/^\\[\\^((?:[^\\]]|\\]|\\[)+?)\\]:/)):\n            space = matches[0].length - 1;\n            this.startBlock('footnote', key, [space, matches[1]]);\n            break;\n          case !!(matches = line.match(/^\\s*\\[((?:[^\\]]|\\]|\\[)+?)\\]:\\s*(.+)$/)):\n            this.definitions[matches[1]] = this.cleanUrl(matches[2]);\n            this.startBlock('definition', key).endBlock();\n            break;\n          case !!(line.match(/^\\s*>/)):\n            if (this.isBlock('quote')) {\n              this.setBlock(key);\n            } else {\n              this.startBlock('quote', key);\n            }\n            break;\n          case !!(matches = line.match(/^((?:(?:(?:[ :]*\\-[ :]*)+(?:\\||\\+))|(?:(?:\\||\\+)(?:[ :]*\\-[ :]*)+)|(?:(?:[ :]*\\-[ :]*)+(?:\\||\\+)(?:[ :]*\\-[ :]*)+))+)$/)):\n            if (this.isBlock('table')) {\n              block[3][0].push(block[3][2]);\n              block[3][2] += 1;\n              this.setBlock(key, block[3]);\n            } else {\n              head = 0;\n              if ((block == null) || block[0] !== 'normal' || lines[block[2]].match(/^\\s*$/)) {\n                this.startBlock('table', key);\n              } else {\n                head = 1;\n                this.backBlock(1, 'table');\n              }\n              if (matches[1][0] === '|') {\n                matches[1] = matches[1].substring(1);\n                if (matches[1][matches[1].length - 1] === '|') {\n                  matches[1] = matches[1].substring(0, matches[1].length - 1);\n                }\n              }\n              rows = matches[1].split(/\\+|\\|/);\n              aligns = [];\n              for (m = 0, len2 = rows.length; m < len2; m++) {\n                row = rows[m];\n                align = 'none';\n                if (!!(matches = row.match(/^\\s*(:?)\\-+(:?)\\s*$/))) {\n                  if (!!matches[1] && !!matches[2]) {\n                    align = 'center';\n                  } else if (!!matches[1]) {\n                    align = 'left';\n                  } else if (!!matches[2]) {\n                    align = 'right';\n                  }\n                }\n                aligns.push(align);\n              }\n              this.setBlock(key, [[head], aligns, head + 1]);\n            }\n            break;\n          case !!(matches = line.match(/^(#+)(.*)$/)):\n            num = Math.min(matches[1].length, 6);\n            this.startBlock('sh', key, num).endBlock();\n            break;\n          case !!(matches = line.match(/^\\s*((=|-){2,})\\s*$/)) && ((block != null) && block[0] === 'normal' && !lines[block[2]].match(/^\\s*$/)):\n            if (this.isBlock('normal')) {\n              this.backBlock(1, 'mh', matches[1][0] === '=' ? 1 : 2).setBlock(key).endBlock();\n            } else {\n              this.startBlock('normal', key);\n            }\n            break;\n          case !!(line.match(/^[-\\*]{3,}\\s*$/)):\n            this.startBlock('hr', key).endBlock();\n            break;\n          default:\n            if (this.isBlock('list')) {\n              if (line.match(/^(\\s*)/)) {\n                if (emptyCount > 0) {\n                  this.startBlock('normal', key);\n                } else {\n                  this.setBlock(key);\n                }\n                emptyCount += 1;\n              } else if (emptyCount === 0) {\n                this.setBlock(key);\n              } else {\n                this.startBlock('normal', key);\n              }\n            } else if (this.isBlock('footnote')) {\n              matches = line.match(/^(\\s*)/);\n              if (matches[1].length >= block[3][0]) {\n                this.setBlock(key);\n              } else {\n                this.startBlock('normal', key);\n              }\n            } else if (this.isBlock('table')) {\n              if (0 <= line.indexOf('|')) {\n                block[3][2] += 1;\n                this.setBlock(key, block[3]);\n              } else {\n                this.startBlock('normal', key);\n              }\n            } else if (this.isBlock('pre')) {\n              if (line.match(/^\\s*$/)) {\n                if (emptyCount > 0) {\n                  this.startBlock('normal', key);\n                } else {\n                  this.setBlock(key);\n                }\n                emptyCount += 1;\n              } else {\n                this.startBlock('normal', key);\n              }\n            } else if (this.isBlock('quote')) {\n              if (line.match(/^(\\s*)/)) {\n                if (emptyCount > 0) {\n                  this.startBlock('normal', key);\n                } else {\n                  this.setBlock(key);\n                }\n                emptyCount += 1;\n              } else if (emptyCount === 0) {\n                this.setBlock(key);\n              } else {\n                this.startBlock('normal', key);\n              }\n            } else {\n              if ((block == null) || block[0] !== 'normal') {\n                this.startBlock('normal', key);\n              } else {\n                this.setBlock(key);\n              }\n            }\n        }\n      }\n      return this.optimizeBlocks(this.blocks, lines);\n    };\n\n    Parser.prototype.optimizeBlocks = function(_blocks, _lines) {\n      var block, blocks, from, isEmpty, key, lines, moved, nextBlock, prevBlock, to, type, types;\n      blocks = _blocks.slice(0);\n      lines = _lines.slice(0);\n      blocks = this.call('beforeOptimizeBlocks', blocks, lines);\n      key = 0;\n      while (blocks[key] != null) {\n        moved = false;\n        block = blocks[key];\n        prevBlock = blocks[key - 1] != null ? blocks[key - 1] : null;\n        nextBlock = blocks[key + 1] != null ? blocks[key + 1] : null;\n        type = block[0], from = block[1], to = block[2];\n        if ('pre' === type) {\n          isEmpty = lines.reduce(function(result, line) {\n            return (line.match(/^\\s*$/)) && result;\n          }, true);\n          if (isEmpty) {\n            block[0] = type = 'normal';\n          }\n        }\n        if ('normal' === type) {\n          types = ['list', 'quote'];\n          if (from === to && (lines[from].match(/^\\s*$/)) && (prevBlock != null) && (nextBlock != null)) {\n            if (prevBlock[0] === nextBlock[0] && (types.indexOf(prevBlock[0])) >= 0) {\n              blocks[key - 1] = [prevBlock[0], prevBlock[1], nextBlock[2], null];\n              blocks.splice(key, 2);\n              moved = true;\n            }\n          }\n        }\n        if (!moved) {\n          key += 1;\n        }\n      }\n      return this.call('afterOptimizeBlocks', blocks, lines);\n    };\n\n    Parser.prototype.parseCode = function(lines, parts) {\n      var blank, count, lang, rel, str;\n      blank = parts[0], lang = parts[1];\n      lang = trim(lang);\n      count = blank.length;\n      if (!lang.match(/^[_a-z0-9-\\+\\#\\:\\.]+$/i)) {\n        lang = null;\n      } else {\n        parts = lang.split(':');\n        if (parts.length > 1) {\n          lang = parts[0], rel = parts[1];\n          lang = trim(lang);\n          rel = trim(rel);\n        }\n      }\n      lines = lines.slice(1, -1).map(function(line) {\n        return line.replace(new RegExp(\"/^[ ]{\" + count + \"}/\"), '');\n      });\n      str = lines.join(\"\\n\");\n      if (str.match(/^\\s*$/)) {\n        return '';\n      } else {\n        return '<pre><code' + (!!lang ? \" class=\\\"\" + lang + \"\\\"\" : '') + (!!rel ? \" rel=\\\"\" + rel + \"\\\"\" : '') + '>' + (htmlspecialchars(str)) + '</code></pre>';\n      }\n    };\n\n    Parser.prototype.parsePre = function(lines) {\n      var str;\n      lines = lines.map(function(line) {\n        return htmlspecialchars(line.substring(4));\n      });\n      str = lines.join(\"\\n\");\n      if (str.match(/^\\s*$/)) {\n        return '';\n      } else {\n        return '<pre><code>' + str + '</code></pre>';\n      }\n    };\n\n    Parser.prototype.parseSh = function(lines, num) {\n      var line;\n      line = this.parseInline(trim(lines[0], '# '));\n      if (line.match(/^\\s*$/)) {\n        return '';\n      } else {\n        return \"<h\" + num + \">\" + line + \"</h\" + num + \">\";\n      }\n    };\n\n    Parser.prototype.parseMh = function(lines, num) {\n      return this.parseSh(lines, num);\n    };\n\n    Parser.prototype.parseQuote = function(lines) {\n      var str;\n      lines = lines.map(function(line) {\n        return line.replace(/^\\s*> ?/, '');\n      });\n      str = lines.join(\"\\n\");\n      if (str.match(/^\\s*$/)) {\n        return '';\n      } else {\n        return '<blockquote>' + (this.parse(str)) + '</blockquote>';\n      }\n    };\n\n    Parser.prototype.parseList = function(lines) {\n      var found, html, j, key, l, lastType, leftLines, len, len1, len2, line, m, matches, minSpace, row, rows, secondMinSpace, space, text, type;\n      html = '';\n      minSpace = 99999;\n      rows = [];\n      for (key = j = 0, len = lines.length; j < len; key = ++j) {\n        line = lines[key];\n        if (matches = line.match(/^(\\s*)((?:[0-9a-z]+\\.?)|\\-|\\+|\\*)(\\s+)(.*)$/)) {\n          space = matches[1].length;\n          type = 0 <= '+-*'.indexOf(matches[2]) ? 'ul' : 'ol';\n          minSpace = Math.min(space, minSpace);\n          rows.push([space, type, line, matches[4]]);\n        } else {\n          rows.push(line);\n        }\n      }\n      found = false;\n      secondMinSpace = 99999;\n      for (l = 0, len1 = rows.length; l < len1; l++) {\n        row = rows[l];\n        if (row instanceof Array && row[0] !== minSpace) {\n          secondMinSpace = Math.min(secondMinSpace, row[0]);\n          found = true;\n        }\n      }\n      secondMinSpace = found ? secondMinSpace : minSpace;\n      lastType = '';\n      leftLines = [];\n      for (m = 0, len2 = rows.length; m < len2; m++) {\n        row = rows[m];\n        if (row instanceof Array) {\n          space = row[0], type = row[1], line = row[2], text = row[3];\n          if (space !== minSpace) {\n            leftLines.push(line.replace(new RegExp(\"^\\\\s{\" + secondMinSpace + \"}\"), ''));\n          } else {\n            if (leftLines.length > 0) {\n              html += '<li>' + (this.parse(leftLines.join(\"\\n\"))) + '</li>';\n            }\n            if (lastType !== type) {\n              if (!!lastType) {\n                html += \"</\" + lastType + \">\";\n              }\n              html += \"<\" + type + \">\";\n            }\n            leftLines = [text];\n            lastType = type;\n          }\n        } else {\n          leftLines.push(row.replace(new RegExp(\"^\\\\s{\" + secondMinSpace + \"}\"), ''));\n        }\n      }\n      if (leftLines.length > 0) {\n        html += '<li>' + (this.parse(leftLines.join(\"\\n\"))) + (\"</li></\" + lastType + \">\");\n      }\n      return html;\n    };\n\n    Parser.prototype.parseTable = function(lines, value) {\n      var aligns, body, column, columns, head, html, ignores, j, key, l, last, len, len1, line, num, output, row, rows, tag, text;\n      ignores = value[0], aligns = value[1];\n      head = ignores.length > 0 && (ignores.reduce(function(prev, curr) {\n        return curr + prev;\n      })) > 0;\n      html = '<table>';\n      body = head ? null : true;\n      output = false;\n      for (key = j = 0, len = lines.length; j < len; key = ++j) {\n        line = lines[key];\n        if (0 <= ignores.indexOf(key)) {\n          if (head && output) {\n            head = false;\n            body = true;\n          }\n          continue;\n        }\n        line = trim(line);\n        output = true;\n        if (line[0] === '|') {\n          line = line.substring(1);\n          if (line[line.length - 1] === '|') {\n            line = line.substring(0, line.length - 1);\n          }\n        }\n        rows = line.split('|').map(function(row) {\n          if (row.match(/^\\s+$/)) {\n            return '';\n          } else {\n            return trim(row);\n          }\n        });\n        columns = {};\n        last = -1;\n        for (l = 0, len1 = rows.length; l < len1; l++) {\n          row = rows[l];\n          if (row.length > 0) {\n            last += 1;\n            columns[last] = [(columns[last] != null ? columns[last][0] + 1 : 1), row];\n          } else if (columns[last] != null) {\n            columns[last][0] += 1;\n          } else {\n            columns[0] = [1, row];\n          }\n        }\n        if (head) {\n          html += '<thead>';\n        } else if (body) {\n          html += '<tbody>';\n        }\n        html += '<tr>';\n        for (key in columns) {\n          column = columns[key];\n          num = column[0], text = column[1];\n          tag = head ? 'th' : 'td';\n          html += \"<\" + tag;\n          if (num > 1) {\n            html += \" colspan=\\\"\" + num + \"\\\"\";\n          }\n          if ((aligns[key] != null) && aligns[key] !== 'none') {\n            html += \" align=\\\"\" + aligns[key] + \"\\\"\";\n          }\n          html += '>' + (this.parseInline(text)) + (\"</\" + tag + \">\");\n        }\n        html += '</tr>';\n        if (head) {\n          html += '</thead>';\n        } else if (body) {\n          body = false;\n        }\n      }\n      if (body !== null) {\n        html += '</tbody>';\n      }\n      return html += '</table>';\n    };\n\n    Parser.prototype.parseHr = function() {\n      return '<hr>';\n    };\n\n    Parser.prototype.parseNormal = function(lines) {\n      var str;\n      lines = lines.map((function(_this) {\n        return function(line) {\n          return _this.parseInline(line);\n        };\n      })(this));\n      str = trim(lines.join(\"\\n\"));\n      str = str.replace(/(\\n\\s*){2,}/g, '</p><p>');\n      str = str.replace(/\\n/g, '<br>');\n      if (str.match(/^\\s*$/)) {\n        return '';\n      } else {\n        return \"<p>\" + str + \"</p>\";\n      }\n    };\n\n    Parser.prototype.parseFootnote = function(lines, value) {\n      var index, note, space;\n      space = value[0], note = value[1];\n      index = this.footnotes.indexOf(note);\n      if (index >= 0) {\n        lines = lines.slice(0);\n        lines[0] = lines[0].replace(/^\\[\\^((?:[^\\]]|\\]|\\[)+?)\\]:/, '');\n        this.footnotes[index] = lines;\n      }\n      return '';\n    };\n\n    Parser.prototype.parseDefinition = function() {\n      return '';\n    };\n\n    Parser.prototype.parseHtml = function(lines, type) {\n      lines = lines.map((function(_this) {\n        return function(line) {\n          return _this.parseInline(line, _this.specialWhiteList[type] != null ? _this.specialWhiteList[type] : '');\n        };\n      })(this));\n      return lines.join(\"\\n\");\n    };\n\n    Parser.prototype.cleanUrl = function(url) {\n      var matches;\n      if (!!(matches = url.match(/^\\s*((http|https|ftp|mailto):[x80-xff_a-z0-9-\\.\\/%#@\\?\\+=~\\|\\,&\\(\\)]+)/i))) {\n        matches[1];\n      }\n      if (!!(matches = url.match(/^\\s*([x80-xff_a-z0-9-\\.\\/%#@\\?\\+=~\\|\\,&]+)/i))) {\n        return matches[1];\n      } else {\n        return '#';\n      }\n    };\n\n    Parser.prototype.escapeBracket = function(str) {\n      return str_replace(['\\\\[', '\\\\]', '\\\\(', '\\\\)'], ['[', ']', '(', ')'], str);\n    };\n\n    Parser.prototype.startBlock = function(type, start, value) {\n      if (value == null) {\n        value = null;\n      }\n      this.pos += 1;\n      this.current = type;\n      this.blocks.push([type, start, start, value]);\n      return this;\n    };\n\n    Parser.prototype.endBlock = function() {\n      this.current = 'normal';\n      return this;\n    };\n\n    Parser.prototype.isBlock = function(type, value) {\n      if (value == null) {\n        value = null;\n      }\n      return this.current === type && (null === value ? true : this.blocks[this.pos][3] === value);\n    };\n\n    Parser.prototype.getBlock = function() {\n      if (this.blocks[this.pos] != null) {\n        return this.blocks[this.pos];\n      } else {\n        return null;\n      }\n    };\n\n    Parser.prototype.setBlock = function(to, value) {\n      if (to == null) {\n        to = null;\n      }\n      if (value == null) {\n        value = null;\n      }\n      if (to !== null) {\n        this.blocks[this.pos][2] = to;\n      }\n      if (value !== null) {\n        this.blocks[this.pos][3] = value;\n      }\n      return this;\n    };\n\n    Parser.prototype.backBlock = function(step, type, value) {\n      var item, last;\n      if (value == null) {\n        value = null;\n      }\n      if (this.pos < 0) {\n        return this.startBlock(type, 0, value);\n      }\n      last = this.blocks[this.pos][2];\n      this.blocks[this.pos][2] = last - step;\n      item = [type, last - step + 1, last, value];\n      if (this.blocks[this.pos][1] <= this.blocks[this.pos][2]) {\n        this.pos += 1;\n        this.blocks.push(item);\n      } else {\n        this.blocks[this.pos] = item;\n      }\n      this.current = type;\n      return this;\n    };\n\n    Parser.prototype.combineBlock = function() {\n      var current, prev;\n      if (this.pos < 1) {\n        return this;\n      }\n      prev = this.blocks[this.pos - 1].slice(0);\n      current = this.blocks[this.pos].slice(0);\n      prev[2] = current[2];\n      this.blocks[this.pos - 1] = prev;\n      this.current = prev[0];\n      this.blocks = this.blocks.slice(0, -1);\n      this.pos -= 1;\n      return this;\n    };\n\n    return Parser;\n\n  })();\n\n  if (typeof module !== \"undefined\" && module !== null) {\n    module.exports = Parser;\n  } else if (typeof window !== \"undefined\" && window !== null) {\n    window.HyperDown = Parser;\n  }\n\n}).call(this);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)(module)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 1 */
/***/ function(module, exports) {

eval("module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tconfigurable: false,\r\n\t\t\tget: function() { return module.l; }\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tconfigurable: false,\r\n\t\t\tget: function() { return module.i; }\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanM/YzNjMiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xyXG5cdGlmKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XHJcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcclxuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRpZighbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1vZHVsZS5sOyB9XHJcblx0XHR9KTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbW9kdWxlLmk7IH1cclxuXHRcdH0pO1xyXG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XHJcblx0fVxyXG5cdHJldHVybiBtb2R1bGU7XHJcbn1cclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzXG4vLyBtb2R1bGUgaWQgPSAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

eval("/**\n * Created by tanjibo on 2017/4/19.\n */\nHyperDown = __webpack_require__(0);\n\nvar parser = new HyperDown,\n    html = parser.makeHtml(markdownText);\nconsole.log(parser);//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9yZXNvdXJjZXMvYXNzZXRzL2pzL2Zyb250L2VkaXQuanM/MDA3YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgdGFuamlibyBvbiAyMDE3LzQvMTkuXG4gKi9cbkh5cGVyRG93biA9IHJlcXVpcmUoJ2h5cGVyZG93bicpO1xuXG52YXIgcGFyc2VyID0gbmV3IEh5cGVyRG93bixcbiAgICBodG1sID0gcGFyc2VyLm1ha2VIdG1sKG1hcmtkb3duVGV4dCk7XG5jb25zb2xlLmxvZyhwYXJzZXIpO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyByZXNvdXJjZXMvYXNzZXRzL2pzL2Zyb250L2VkaXQuanMiXSwibWFwcGluZ3MiOiJBQUFBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }
/******/ ]);